# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import asr.streaming_voice_pb2 as streaming__voice__pb2


class StreamVoiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendVoice = channel.stream_stream(
                '/vad.StreamVoice/SendVoice',
                request_serializer=streaming__voice__pb2.VoiceRequest.SerializeToString,
                response_deserializer=streaming__voice__pb2.TextReply.FromString,
                )
        self.SendFile = channel.stream_unary(
                '/vad.StreamVoice/SendFile',
                request_serializer=streaming__voice__pb2.VoiceRequest.SerializeToString,
                response_deserializer=streaming__voice__pb2.TextReply.FromString,
                )


class StreamVoiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendVoice(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendFile(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamVoiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendVoice': grpc.stream_stream_rpc_method_handler(
                    servicer.SendVoice,
                    request_deserializer=streaming__voice__pb2.VoiceRequest.FromString,
                    response_serializer=streaming__voice__pb2.TextReply.SerializeToString,
            ),
            'SendFile': grpc.stream_unary_rpc_method_handler(
                    servicer.SendFile,
                    request_deserializer=streaming__voice__pb2.VoiceRequest.FromString,
                    response_serializer=streaming__voice__pb2.TextReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vad.StreamVoice', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StreamVoice(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendVoice(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/vad.StreamVoice/SendVoice',
            streaming__voice__pb2.VoiceRequest.SerializeToString,
            streaming__voice__pb2.TextReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/vad.StreamVoice/SendFile',
            streaming__voice__pb2.VoiceRequest.SerializeToString,
            streaming__voice__pb2.TextReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
